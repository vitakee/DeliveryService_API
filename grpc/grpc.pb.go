// Code generated by protoc-gen-go.
// source: grpc.proto
// DO NOT EDIT!

/*
Package delivery_pb is a generated protocol buffer package.

It is generated from these files:
	grpc.proto

It has these top-level messages:
	OnItReq
	Nil
	Location
	OrdersToDeliver
	OrderToDeliver
	WhyNot
	ApproveAnswer
	Order
	Cafe
	Product
	Cart
	AddToCartReq
	Cafes
	Orders
	Products
	Carts
*/
package delivery_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OnItReq struct {
	Location *Location `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	OrderId  int32     `protobuf:"varint,2,opt,name=orderId" json:"orderId,omitempty"`
}

func (m *OnItReq) Reset()                    { *m = OnItReq{} }
func (m *OnItReq) String() string            { return proto.CompactTextString(m) }
func (*OnItReq) ProtoMessage()               {}
func (*OnItReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OnItReq) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *OnItReq) GetOrderId() int32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type Nil struct {
}

func (m *Nil) Reset()                    { *m = Nil{} }
func (m *Nil) String() string            { return proto.CompactTextString(m) }
func (*Nil) ProtoMessage()               {}
func (*Nil) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Location struct {
	Longitude float32 `protobuf:"fixed32,1,opt,name=longitude" json:"longitude,omitempty"`
	Latitude  float32 `protobuf:"fixed32,2,opt,name=latitude" json:"latitude,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Location) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Location) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

type OrdersToDeliver struct {
	Otd []*OrderToDeliver `protobuf:"bytes,1,rep,name=otd" json:"otd,omitempty"`
}

func (m *OrdersToDeliver) Reset()                    { *m = OrdersToDeliver{} }
func (m *OrdersToDeliver) String() string            { return proto.CompactTextString(m) }
func (*OrdersToDeliver) ProtoMessage()               {}
func (*OrdersToDeliver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OrdersToDeliver) GetOtd() []*OrderToDeliver {
	if m != nil {
		return m.Otd
	}
	return nil
}

type OrderToDeliver struct {
	Order          *Order `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	AproovedByCafe bool   `protobuf:"varint,2,opt,name=aprooved_by_cafe,json=aproovedByCafe" json:"aprooved_by_cafe,omitempty"`
	Id             int32  `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *OrderToDeliver) Reset()                    { *m = OrderToDeliver{} }
func (m *OrderToDeliver) String() string            { return proto.CompactTextString(m) }
func (*OrderToDeliver) ProtoMessage()               {}
func (*OrderToDeliver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OrderToDeliver) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *OrderToDeliver) GetAproovedByCafe() bool {
	if m != nil {
		return m.AproovedByCafe
	}
	return false
}

func (m *OrderToDeliver) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type WhyNot struct {
	WhyNot string `protobuf:"bytes,1,opt,name=whyNot" json:"whyNot,omitempty"`
	CartId int32  `protobuf:"varint,2,opt,name=cartId" json:"cartId,omitempty"`
}

func (m *WhyNot) Reset()                    { *m = WhyNot{} }
func (m *WhyNot) String() string            { return proto.CompactTextString(m) }
func (*WhyNot) ProtoMessage()               {}
func (*WhyNot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WhyNot) GetWhyNot() string {
	if m != nil {
		return m.WhyNot
	}
	return ""
}

func (m *WhyNot) GetCartId() int32 {
	if m != nil {
		return m.CartId
	}
	return 0
}

type ApproveAnswer struct {
	ApproveAnswer bool `protobuf:"varint,1,opt,name=Approve_answer,json=ApproveAnswer" json:"Approve_answer,omitempty"`
}

func (m *ApproveAnswer) Reset()                    { *m = ApproveAnswer{} }
func (m *ApproveAnswer) String() string            { return proto.CompactTextString(m) }
func (*ApproveAnswer) ProtoMessage()               {}
func (*ApproveAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ApproveAnswer) GetApproveAnswer() bool {
	if m != nil {
		return m.ApproveAnswer
	}
	return false
}

type Order struct {
	ProductId int32  `protobuf:"varint,1,opt,name=productId" json:"productId,omitempty"`
	OrderId   int32  `protobuf:"varint,2,opt,name=OrderId" json:"OrderId,omitempty"`
	Comment   string `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	Price     int32  `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	CartId    int32  `protobuf:"varint,5,opt,name=cartId" json:"cartId,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Order) GetProductId() int32 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *Order) GetOrderId() int32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *Order) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Order) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetCartId() int32 {
	if m != nil {
		return m.CartId
	}
	return 0
}

type Cafe struct {
	Id       int32     `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Tags     []string  `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Location *Location `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Link     string    `protobuf:"bytes,5,opt,name=link" json:"link,omitempty"`
	Featured bool      `protobuf:"varint,6,opt,name=featured" json:"featured,omitempty"`
	Position int32     `protobuf:"varint,7,opt,name=position" json:"position,omitempty"`
}

func (m *Cafe) Reset()                    { *m = Cafe{} }
func (m *Cafe) String() string            { return proto.CompactTextString(m) }
func (*Cafe) ProtoMessage()               {}
func (*Cafe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Cafe) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Cafe) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cafe) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Cafe) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Cafe) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Cafe) GetFeatured() bool {
	if m != nil {
		return m.Featured
	}
	return false
}

func (m *Cafe) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type Product struct {
	Name        string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Price       int32    `protobuf:"varint,2,opt,name=price" json:"price,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	CafeId      int32    `protobuf:"varint,4,opt,name=cafeId" json:"cafeId,omitempty"`
	Tags        []string `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	Id          int32    `protobuf:"varint,6,opt,name=Id" json:"Id,omitempty"`
	Link        string   `protobuf:"bytes,7,opt,name=link" json:"link,omitempty"`
	CategoryId  int32    `protobuf:"varint,8,opt,name=categoryId" json:"categoryId,omitempty"`
	Cat         bool     `protobuf:"varint,9,opt,name=cat" json:"cat,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Product) GetCafeId() int32 {
	if m != nil {
		return m.CafeId
	}
	return 0
}

func (m *Product) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Product) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Product) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Product) GetCategoryId() int32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *Product) GetCat() bool {
	if m != nil {
		return m.Cat
	}
	return false
}

type Cart struct {
	Cartid         int32     `protobuf:"varint,1,opt,name=cartid" json:"cartid,omitempty"`
	Open           bool      `protobuf:"varint,2,opt,name=open" json:"open,omitempty"`
	PlaceToDeliver *Location `protobuf:"bytes,3,opt,name=PlaceToDeliver" json:"PlaceToDeliver,omitempty"`
	Price          int32     `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	AproovedByCafe bool      `protobuf:"varint,5,opt,name=aprooved_by_cafe,json=aproovedByCafe" json:"aprooved_by_cafe,omitempty"`
	TuktukIsOnIt   bool      `protobuf:"varint,6,opt,name=tuktuk_is_on_it,json=tuktukIsOnIt" json:"tuktuk_is_on_it,omitempty"`
}

func (m *Cart) Reset()                    { *m = Cart{} }
func (m *Cart) String() string            { return proto.CompactTextString(m) }
func (*Cart) ProtoMessage()               {}
func (*Cart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Cart) GetCartid() int32 {
	if m != nil {
		return m.Cartid
	}
	return 0
}

func (m *Cart) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

func (m *Cart) GetPlaceToDeliver() *Location {
	if m != nil {
		return m.PlaceToDeliver
	}
	return nil
}

func (m *Cart) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Cart) GetAproovedByCafe() bool {
	if m != nil {
		return m.AproovedByCafe
	}
	return false
}

func (m *Cart) GetTuktukIsOnIt() bool {
	if m != nil {
		return m.TuktukIsOnIt
	}
	return false
}

type AddToCartReq struct {
	OrderId int32 `protobuf:"varint,1,opt,name=orderId" json:"orderId,omitempty"`
	CartId  int32 `protobuf:"varint,2,opt,name=cartId" json:"cartId,omitempty"`
}

func (m *AddToCartReq) Reset()                    { *m = AddToCartReq{} }
func (m *AddToCartReq) String() string            { return proto.CompactTextString(m) }
func (*AddToCartReq) ProtoMessage()               {}
func (*AddToCartReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AddToCartReq) GetOrderId() int32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *AddToCartReq) GetCartId() int32 {
	if m != nil {
		return m.CartId
	}
	return 0
}

type Cafes struct {
	Cafe []*Cafe `protobuf:"bytes,1,rep,name=cafe" json:"cafe,omitempty"`
}

func (m *Cafes) Reset()                    { *m = Cafes{} }
func (m *Cafes) String() string            { return proto.CompactTextString(m) }
func (*Cafes) ProtoMessage()               {}
func (*Cafes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Cafes) GetCafe() []*Cafe {
	if m != nil {
		return m.Cafe
	}
	return nil
}

type Orders struct {
	Order []*Order `protobuf:"bytes,1,rep,name=order" json:"order,omitempty"`
}

func (m *Orders) Reset()                    { *m = Orders{} }
func (m *Orders) String() string            { return proto.CompactTextString(m) }
func (*Orders) ProtoMessage()               {}
func (*Orders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Orders) GetOrder() []*Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type Products struct {
	Products []*Product `protobuf:"bytes,1,rep,name=products" json:"products,omitempty"`
}

func (m *Products) Reset()                    { *m = Products{} }
func (m *Products) String() string            { return proto.CompactTextString(m) }
func (*Products) ProtoMessage()               {}
func (*Products) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Products) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

type Carts struct {
	Carts []*Cart `protobuf:"bytes,1,rep,name=carts" json:"carts,omitempty"`
}

func (m *Carts) Reset()                    { *m = Carts{} }
func (m *Carts) String() string            { return proto.CompactTextString(m) }
func (*Carts) ProtoMessage()               {}
func (*Carts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Carts) GetCarts() []*Cart {
	if m != nil {
		return m.Carts
	}
	return nil
}

func init() {
	proto.RegisterType((*OnItReq)(nil), "delivery_pb.OnItReq")
	proto.RegisterType((*Nil)(nil), "delivery_pb.nil")
	proto.RegisterType((*Location)(nil), "delivery_pb.location")
	proto.RegisterType((*OrdersToDeliver)(nil), "delivery_pb.OrdersToDeliver")
	proto.RegisterType((*OrderToDeliver)(nil), "delivery_pb.OrderToDeliver")
	proto.RegisterType((*WhyNot)(nil), "delivery_pb.Why_not")
	proto.RegisterType((*ApproveAnswer)(nil), "delivery_pb.Approve_answer")
	proto.RegisterType((*Order)(nil), "delivery_pb.Order")
	proto.RegisterType((*Cafe)(nil), "delivery_pb.Cafe")
	proto.RegisterType((*Product)(nil), "delivery_pb.Product")
	proto.RegisterType((*Cart)(nil), "delivery_pb.Cart")
	proto.RegisterType((*AddToCartReq)(nil), "delivery_pb.AddToCartReq")
	proto.RegisterType((*Cafes)(nil), "delivery_pb.Cafes")
	proto.RegisterType((*Orders)(nil), "delivery_pb.Orders")
	proto.RegisterType((*Products)(nil), "delivery_pb.Products")
	proto.RegisterType((*Carts)(nil), "delivery_pb.Carts")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Customer service

type CustomerClient interface {
	AddToOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Nil, error)
	RemoveFromOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Nil, error)
	ListCategories(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Products, error)
	ListCategory(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Nil, error)
	ListCafes(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Cafes, error)
	Declined(ctx context.Context, in *WhyNot, opts ...grpc.CallOption) (*Order, error)
	ListProducts(ctx context.Context, in *Cafe, opts ...grpc.CallOption) (*Products, error)
	OpenCart(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Nil, error)
	CloseCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Nil, error)
	AddToCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Nil, error)
	RemoveFromCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Nil, error)
	Checkout(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Cart, error)
	ListCarts(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Nil, error)
}

type customerClient struct {
	cc *grpc.ClientConn
}

func NewCustomerClient(cc *grpc.ClientConn) CustomerClient {
	return &customerClient{cc}
}

func (c *customerClient) AddToOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/AddToOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) RemoveFromOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/RemoveFromOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) ListCategories(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Products, error) {
	out := new(Products)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/ListCategories", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) ListCategory(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/ListCategory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) ListCafes(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Cafes, error) {
	out := new(Cafes)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/ListCafes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) Declined(ctx context.Context, in *WhyNot, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/Declined", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) ListProducts(ctx context.Context, in *Cafe, opts ...grpc.CallOption) (*Products, error) {
	out := new(Products)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/ListProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) OpenCart(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/OpenCart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) CloseCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/CloseCart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) AddToCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/AddToCart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) RemoveFromCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/RemoveFromCart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) Checkout(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Cart, error) {
	out := new(Cart)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/Checkout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) ListCarts(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/delivery_pb.Customer/ListCarts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Customer service

type CustomerServer interface {
	AddToOrder(context.Context, *Order) (*Nil, error)
	RemoveFromOrder(context.Context, *Order) (*Nil, error)
	ListCategories(context.Context, *Nil) (*Products, error)
	ListCategory(context.Context, *Product) (*Nil, error)
	ListCafes(context.Context, *Nil) (*Cafes, error)
	Declined(context.Context, *WhyNot) (*Order, error)
	ListProducts(context.Context, *Cafe) (*Products, error)
	OpenCart(context.Context, *Nil) (*Nil, error)
	CloseCart(context.Context, *Cart) (*Nil, error)
	AddToCart(context.Context, *Cart) (*Nil, error)
	RemoveFromCart(context.Context, *Cart) (*Nil, error)
	Checkout(context.Context, *Cart) (*Cart, error)
	ListCarts(context.Context, *Nil) (*Nil, error)
}

func RegisterCustomerServer(s *grpc.Server, srv CustomerServer) {
	s.RegisterService(&_Customer_serviceDesc, srv)
}

func _Customer_AddToOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).AddToOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/AddToOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).AddToOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_RemoveFromOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).RemoveFromOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/RemoveFromOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).RemoveFromOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).ListCategories(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_ListCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).ListCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/ListCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).ListCategory(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_ListCafes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).ListCafes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/ListCafes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).ListCafes(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_Declined_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhyNot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).Declined(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/Declined",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).Declined(ctx, req.(*WhyNot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cafe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).ListProducts(ctx, req.(*Cafe))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_OpenCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).OpenCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/OpenCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).OpenCart(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_CloseCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).CloseCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/CloseCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).CloseCart(ctx, req.(*Cart))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/AddToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).AddToCart(ctx, req.(*Cart))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_RemoveFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).RemoveFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/RemoveFromCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).RemoveFromCart(ctx, req.(*Cart))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_Checkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).Checkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/Checkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).Checkout(ctx, req.(*Cart))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_ListCarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).ListCarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.Customer/ListCarts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).ListCarts(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

var _Customer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "delivery_pb.Customer",
	HandlerType: (*CustomerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToOrder",
			Handler:    _Customer_AddToOrder_Handler,
		},
		{
			MethodName: "RemoveFromOrder",
			Handler:    _Customer_RemoveFromOrder_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _Customer_ListCategories_Handler,
		},
		{
			MethodName: "ListCategory",
			Handler:    _Customer_ListCategory_Handler,
		},
		{
			MethodName: "ListCafes",
			Handler:    _Customer_ListCafes_Handler,
		},
		{
			MethodName: "Declined",
			Handler:    _Customer_Declined_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _Customer_ListProducts_Handler,
		},
		{
			MethodName: "OpenCart",
			Handler:    _Customer_OpenCart_Handler,
		},
		{
			MethodName: "CloseCart",
			Handler:    _Customer_CloseCart_Handler,
		},
		{
			MethodName: "AddToCart",
			Handler:    _Customer_AddToCart_Handler,
		},
		{
			MethodName: "RemoveFromCart",
			Handler:    _Customer_RemoveFromCart_Handler,
		},
		{
			MethodName: "Checkout",
			Handler:    _Customer_Checkout_Handler,
		},
		{
			MethodName: "ListCarts",
			Handler:    _Customer_ListCarts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// Client API for CafeShop service

type CafeShopClient interface {
	Aproove(ctx context.Context, in *Order, opts ...grpc.CallOption) (*ApproveAnswer, error)
	Decline(ctx context.Context, in *WhyNot, opts ...grpc.CallOption) (*WhyNot, error)
	ListCarts(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Carts, error)
}

type cafeShopClient struct {
	cc *grpc.ClientConn
}

func NewCafeShopClient(cc *grpc.ClientConn) CafeShopClient {
	return &cafeShopClient{cc}
}

func (c *cafeShopClient) Aproove(ctx context.Context, in *Order, opts ...grpc.CallOption) (*ApproveAnswer, error) {
	out := new(ApproveAnswer)
	err := grpc.Invoke(ctx, "/delivery_pb.CafeShop/Aproove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cafeShopClient) Decline(ctx context.Context, in *WhyNot, opts ...grpc.CallOption) (*WhyNot, error) {
	out := new(WhyNot)
	err := grpc.Invoke(ctx, "/delivery_pb.CafeShop/Decline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cafeShopClient) ListCarts(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Carts, error) {
	out := new(Carts)
	err := grpc.Invoke(ctx, "/delivery_pb.CafeShop/ListCarts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CafeShop service

type CafeShopServer interface {
	Aproove(context.Context, *Order) (*ApproveAnswer, error)
	Decline(context.Context, *WhyNot) (*WhyNot, error)
	ListCarts(context.Context, *Nil) (*Carts, error)
}

func RegisterCafeShopServer(s *grpc.Server, srv CafeShopServer) {
	s.RegisterService(&_CafeShop_serviceDesc, srv)
}

func _CafeShop_Aproove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CafeShopServer).Aproove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.CafeShop/Aproove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CafeShopServer).Aproove(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _CafeShop_Decline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhyNot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CafeShopServer).Decline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.CafeShop/Decline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CafeShopServer).Decline(ctx, req.(*WhyNot))
	}
	return interceptor(ctx, in, info, handler)
}

func _CafeShop_ListCarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CafeShopServer).ListCarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.CafeShop/ListCarts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CafeShopServer).ListCarts(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

var _CafeShop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "delivery_pb.CafeShop",
	HandlerType: (*CafeShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Aproove",
			Handler:    _CafeShop_Aproove_Handler,
		},
		{
			MethodName: "Decline",
			Handler:    _CafeShop_Decline_Handler,
		},
		{
			MethodName: "ListCarts",
			Handler:    _CafeShop_ListCarts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// Client API for TukTuk service

type TukTukClient interface {
	OnIt(ctx context.Context, in *OnItReq, opts ...grpc.CallOption) (*ApproveAnswer, error)
	ListOrdersToDeliver(ctx context.Context, in *Location, opts ...grpc.CallOption) (*OrdersToDeliver, error)
}

type tukTukClient struct {
	cc *grpc.ClientConn
}

func NewTukTukClient(cc *grpc.ClientConn) TukTukClient {
	return &tukTukClient{cc}
}

func (c *tukTukClient) OnIt(ctx context.Context, in *OnItReq, opts ...grpc.CallOption) (*ApproveAnswer, error) {
	out := new(ApproveAnswer)
	err := grpc.Invoke(ctx, "/delivery_pb.TukTuk/OnIt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tukTukClient) ListOrdersToDeliver(ctx context.Context, in *Location, opts ...grpc.CallOption) (*OrdersToDeliver, error) {
	out := new(OrdersToDeliver)
	err := grpc.Invoke(ctx, "/delivery_pb.TukTuk/ListOrdersToDeliver", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TukTuk service

type TukTukServer interface {
	OnIt(context.Context, *OnItReq) (*ApproveAnswer, error)
	ListOrdersToDeliver(context.Context, *Location) (*OrdersToDeliver, error)
}

func RegisterTukTukServer(s *grpc.Server, srv TukTukServer) {
	s.RegisterService(&_TukTuk_serviceDesc, srv)
}

func _TukTuk_OnIt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnItReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TukTukServer).OnIt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.TukTuk/OnIt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TukTukServer).OnIt(ctx, req.(*OnItReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TukTuk_ListOrdersToDeliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TukTukServer).ListOrdersToDeliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery_pb.TukTuk/ListOrdersToDeliver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TukTukServer).ListOrdersToDeliver(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

var _TukTuk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "delivery_pb.TukTuk",
	HandlerType: (*TukTukServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnIt",
			Handler:    _TukTuk_OnIt_Handler,
		},
		{
			MethodName: "ListOrdersToDeliver",
			Handler:    _TukTuk_ListOrdersToDeliver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 981 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0x93, 0x38, 0x71, 0x4e, 0x4b, 0xda, 0x1d, 0x76, 0x91, 0x15, 0x2a, 0x14, 0x59, 0xaa,
	0xc8, 0x0d, 0x51, 0x37, 0xbb, 0xd2, 0x52, 0x76, 0x91, 0xb6, 0x4d, 0x84, 0x14, 0x84, 0x68, 0x64,
	0x2a, 0xb8, 0x8c, 0x5c, 0xcf, 0xa4, 0xb5, 0x92, 0x78, 0xcc, 0xcc, 0xb8, 0xab, 0x3c, 0x01, 0xd7,
	0xbc, 0x02, 0x0f, 0xc1, 0x1d, 0x4f, 0xc1, 0x05, 0x3c, 0x0e, 0x9a, 0x9f, 0x38, 0x76, 0xec, 0xb0,
	0xed, 0x9d, 0xcf, 0x99, 0x73, 0xe6, 0x7c, 0xe7, 0x3b, 0x3f, 0x1e, 0x80, 0x3b, 0x96, 0x84, 0x83,
	0x84, 0x51, 0x41, 0xd1, 0x21, 0x26, 0xcb, 0xe8, 0x81, 0xb0, 0xf5, 0x2c, 0xb9, 0xf5, 0x7e, 0x86,
	0xd6, 0x75, 0x3c, 0x11, 0x3e, 0xf9, 0x15, 0xbd, 0x04, 0x67, 0x49, 0xc3, 0x40, 0x44, 0x34, 0x76,
	0xad, 0x9e, 0xd5, 0x3f, 0x1c, 0xbe, 0x18, 0xe4, 0x4c, 0x07, 0x9b, 0x43, 0x3f, 0x33, 0x43, 0x2e,
	0xb4, 0x28, 0xc3, 0x84, 0x4d, 0xb0, 0x5b, 0xeb, 0x59, 0x7d, 0xdb, 0xdf, 0x88, 0x9e, 0x0d, 0xf5,
	0x38, 0x5a, 0x7a, 0xe3, 0xed, 0x9d, 0xe8, 0x14, 0xda, 0x4b, 0x1a, 0xdf, 0x45, 0x22, 0xc5, 0x44,
	0x05, 0xa8, 0xf9, 0x5b, 0x05, 0xea, 0x82, 0xb3, 0x0c, 0x84, 0x3e, 0xac, 0xa9, 0xc3, 0x4c, 0xf6,
	0xde, 0xc3, 0xf1, 0xb5, 0xbc, 0x97, 0xdf, 0xd0, 0xb1, 0x06, 0x84, 0xbe, 0x82, 0x3a, 0x15, 0xd8,
	0xb5, 0x7a, 0xf5, 0xfe, 0xe1, 0xf0, 0xf3, 0x02, 0x4e, 0x65, 0x9a, 0x59, 0xfa, 0xd2, 0xce, 0x13,
	0xd0, 0x29, 0xaa, 0x51, 0x1f, 0x6c, 0x85, 0xd5, 0xa4, 0x8a, 0xca, 0x57, 0xf8, 0xda, 0x00, 0xf5,
	0xe1, 0x24, 0x48, 0x18, 0xa5, 0x0f, 0x04, 0xcf, 0x6e, 0xd7, 0xb3, 0x30, 0x98, 0x6b, 0x84, 0x8e,
	0xdf, 0xd9, 0xe8, 0xaf, 0xd6, 0xa3, 0x60, 0x4e, 0x50, 0x07, 0x6a, 0x11, 0x76, 0xeb, 0x8a, 0x89,
	0x5a, 0x84, 0xbd, 0x0b, 0x68, 0xfd, 0x72, 0xbf, 0x9e, 0xc5, 0x54, 0xa0, 0xcf, 0xa0, 0xf9, 0xe1,
	0x7e, 0xfd, 0x23, 0x15, 0x2a, 0x5e, 0xdb, 0x37, 0x92, 0xd4, 0x87, 0x01, 0x13, 0x19, 0x81, 0x46,
	0xf2, 0xde, 0x40, 0xe7, 0x32, 0x49, 0x18, 0x7d, 0x20, 0xb3, 0x20, 0xe6, 0x1f, 0x08, 0x43, 0x67,
	0xbb, 0x1a, 0x75, 0x93, 0xe3, 0x7f, 0x62, 0xb4, 0x97, 0x4a, 0xe9, 0xfd, 0x66, 0x81, 0xad, 0xe0,
	0x4b, 0xbe, 0x13, 0x46, 0x71, 0x1a, 0xca, 0xdb, 0x2d, 0x75, 0xfb, 0x56, 0x21, 0x4b, 0x77, 0x5d,
	0x2c, 0x9d, 0x11, 0xe5, 0x49, 0x48, 0x57, 0x2b, 0x12, 0x0b, 0x95, 0x4a, 0xdb, 0xdf, 0x88, 0xe8,
	0x39, 0xd8, 0x09, 0x8b, 0x42, 0xe2, 0x36, 0x94, 0x87, 0x16, 0x72, 0x29, 0xd8, 0x85, 0x14, 0xfe,
	0xb2, 0xa0, 0xb1, 0xa1, 0x25, 0x43, 0x50, 0x9b, 0x60, 0x84, 0xa0, 0x11, 0x07, 0x2b, 0x4d, 0x62,
	0xdb, 0x57, 0xdf, 0x52, 0x27, 0x82, 0x3b, 0xee, 0xd6, 0x7b, 0x75, 0xa9, 0x93, 0xdf, 0x85, 0x86,
	0x6c, 0x3c, 0xae, 0x21, 0x11, 0x34, 0x96, 0x51, 0xbc, 0x50, 0x48, 0xda, 0xbe, 0xfa, 0x96, 0x9d,
	0x35, 0x27, 0x81, 0x48, 0x19, 0xc1, 0x6e, 0x53, 0x51, 0x96, 0xc9, 0xf2, 0x2c, 0xa1, 0x3c, 0x52,
	0x21, 0x5a, 0x0a, 0x60, 0x26, 0x7b, 0xff, 0x58, 0xd0, 0x9a, 0x6a, 0xbe, 0x32, 0xc8, 0x56, 0x0e,
	0x72, 0xc6, 0x46, 0x2d, 0xcf, 0x46, 0x0f, 0x0e, 0x31, 0xe1, 0x21, 0x8b, 0x12, 0x75, 0xa9, 0x66,
	0x30, 0xaf, 0xd2, 0x7c, 0xcd, 0xc9, 0x04, 0x1b, 0x1a, 0x8d, 0x94, 0x51, 0x60, 0xe7, 0x28, 0xd0,
	0xd4, 0x35, 0xf3, 0xd4, 0xa9, 0xfc, 0x5a, 0xb9, 0xfc, 0xbe, 0x00, 0x08, 0x03, 0x41, 0xee, 0x28,
	0x5b, 0x4f, 0xb0, 0xeb, 0x28, 0xdb, 0x9c, 0x06, 0x9d, 0x40, 0x3d, 0x0c, 0x84, 0xdb, 0x56, 0xa9,
	0xcb, 0x4f, 0xef, 0x5f, 0x55, 0x19, 0x96, 0x75, 0x5f, 0xb4, 0xa9, 0x8e, 0x91, 0x64, 0x18, 0x9a,
	0x90, 0xd8, 0xb4, 0xb9, 0xfa, 0x46, 0xdf, 0x42, 0x67, 0xba, 0x0c, 0x42, 0x92, 0x8d, 0x90, 0xca,
	0x6d, 0x6f, 0x4d, 0x76, 0x8c, 0xf7, 0xf4, 0x4e, 0xd5, 0x6c, 0xd9, 0x95, 0xb3, 0x75, 0x06, 0xc7,
	0x22, 0x5d, 0x88, 0x74, 0x31, 0x8b, 0xf8, 0x8c, 0xc6, 0xb3, 0x48, 0x98, 0x62, 0x1e, 0x69, 0xf5,
	0x84, 0xcb, 0x3d, 0xe6, 0xbd, 0x87, 0xa3, 0x4b, 0x8c, 0x6f, 0xa8, 0x4c, 0x4f, 0x2e, 0xb5, 0xdc,
	0x86, 0xb2, 0x0a, 0x1b, 0x6a, 0xef, 0xe4, 0x0d, 0xc0, 0x96, 0x01, 0x39, 0x3a, 0x83, 0x86, 0xc2,
	0xa3, 0x77, 0xcc, 0xb3, 0x42, 0x9a, 0xd2, 0xc2, 0x57, 0xc7, 0xde, 0x10, 0x9a, 0x7a, 0x39, 0xe5,
	0x57, 0x4a, 0xfd, 0x7f, 0x57, 0x8a, 0xf7, 0x0e, 0x1c, 0xd3, 0x59, 0x1c, 0x9d, 0x83, 0x63, 0xa6,
	0x92, 0x1b, 0xc7, 0xe7, 0x05, 0x47, 0x63, 0xe8, 0x67, 0x56, 0xde, 0xb9, 0x44, 0xc8, 0x04, 0x47,
	0x5f, 0x82, 0x2d, 0x41, 0xf3, 0x3d, 0x10, 0x99, 0xf0, 0xf5, 0xf9, 0xf0, 0x6f, 0x1b, 0x9c, 0x51,
	0xca, 0x05, 0x5d, 0x11, 0x86, 0x5e, 0x03, 0x28, 0x8a, 0xf4, 0x96, 0xa8, 0x40, 0xd9, 0x3d, 0x29,
	0xe8, 0xe4, 0x1e, 0x3f, 0x40, 0x17, 0x70, 0xec, 0x93, 0x15, 0x7d, 0x20, 0xdf, 0x31, 0xba, 0x7a,
	0x9a, 0xeb, 0x5b, 0xe8, 0xfc, 0x10, 0x71, 0x31, 0xd2, 0x2d, 0x19, 0x11, 0x8e, 0x4a, 0x56, 0xdd,
	0x17, 0x55, 0x39, 0x73, 0xef, 0x00, 0x7d, 0x0d, 0x47, 0x39, 0xe7, 0x35, 0xaa, 0x24, 0xa7, 0x32,
	0xec, 0x2b, 0x68, 0x6b, 0xcf, 0x79, 0x65, 0x44, 0x54, 0x2a, 0xa8, 0x0c, 0xf7, 0x1a, 0x9c, 0x31,
	0x09, 0x97, 0x51, 0x4c, 0xf0, 0x4e, 0x28, 0xb3, 0xc9, 0xbb, 0x15, 0x59, 0xa3, 0x6f, 0x34, 0xc8,
	0xac, 0xa6, 0xe5, 0x66, 0xd9, 0x9f, 0xe0, 0x39, 0x38, 0xd7, 0x09, 0x89, 0xd5, 0x3c, 0x96, 0x51,
	0x56, 0x25, 0x36, 0x84, 0xf6, 0x68, 0x49, 0x39, 0x51, 0x2e, 0xe5, 0xa2, 0xef, 0xf3, 0xc9, 0xe6,
	0xe2, 0xb1, 0x3e, 0x6f, 0xa0, 0xb3, 0x2d, 0xf9, 0xd3, 0x82, 0x39, 0xa3, 0x7b, 0x12, 0x2e, 0x68,
	0x5a, 0xe9, 0x52, 0x56, 0x79, 0x07, 0xe8, 0xe5, 0xa6, 0x5a, 0xb2, 0xb1, 0x1f, 0xc5, 0xc3, 0xf0,
	0x4f, 0x0b, 0x1c, 0xc9, 0xed, 0x4f, 0xf7, 0x34, 0x41, 0xef, 0xa0, 0x75, 0xa9, 0x37, 0x46, 0x65,
	0x5f, 0x16, 0x9f, 0x08, 0xc5, 0x1f, 0xa9, 0x4a, 0xb5, 0x65, 0xca, 0xbe, 0xa7, 0xea, 0x95, 0xda,
	0x7c, 0x93, 0x55, 0xc3, 0x46, 0xa5, 0x54, 0xb9, 0x77, 0x30, 0xfc, 0xdd, 0x82, 0xe6, 0x4d, 0xba,
	0xb8, 0x49, 0x17, 0xe8, 0x2d, 0x34, 0xe4, 0xde, 0xda, 0x89, 0x6a, 0x9e, 0x64, 0x1f, 0x43, 0xfd,
	0x3d, 0x7c, 0x2a, 0x83, 0xef, 0xbe, 0x8d, 0xaa, 0x37, 0x72, 0xf7, 0xb4, 0x4c, 0xcb, 0xd6, 0xe9,
	0xea, 0x02, 0x4e, 0x23, 0x3a, 0x50, 0xcf, 0x44, 0x41, 0x39, 0x0f, 0x70, 0xc0, 0xf2, 0xf6, 0x57,
	0xcf, 0xc6, 0x24, 0xe5, 0xc6, 0x78, 0x3d, 0x95, 0x0f, 0xc9, 0xa9, 0xf5, 0x47, 0xad, 0x3e, 0x1e,
	0x4f, 0x6f, 0x9b, 0xea, 0x5d, 0xf9, 0xea, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x53, 0xf0, 0xbd,
	0x57, 0x65, 0x0a, 0x00, 0x00,
}
